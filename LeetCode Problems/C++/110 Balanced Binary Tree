/*    LeetCode - 110. Balanced Binary Tree

QUESTION :---

Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
 - a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

*/

// SOLUTION

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        
        return dfsHeight(root) != -1;
        
    }
    
    int dfsHeight(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        
        int leftHeight = dfsHeight(root->left);
        if(leftHeight == -1) return -1;
        
        int rightHeight = dfsHeight(root->right);
        if(rightHeight == -1) return -1;
        
        if(abs(leftHeight - rightHeight) > 1) return -1;
        
        return 1 + max(leftHeight, rightHeight);
    }
};

// At any point, if -1 is returned we know that the tree is not balanced.


